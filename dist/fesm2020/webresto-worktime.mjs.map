{"version":3,"file":"webresto-worktime.mjs","sources":["../../src/lib/locale_data_core.ts","../../src/lib/locale_data_api.ts","../../src/lib/formatDate.ts","../../src/lib/tz.ts","../../src/lib/worktime.validator.ts","../../src/webresto-worktime.ts"],"sourcesContent":["function plural(n: number): number {\r\n  const i = Math.floor(Math.abs(n));\r\n  const v = n.toString().replace(/^[^.]*\\.?/, '').length;\r\n  if (i === 1 && v === 0) { return 1; }\r\n  return 5;\r\n}\r\n\r\nfunction normalizeLocale(locale: string): string {\r\n  return locale.toLowerCase().replace(/_/g, '-');\r\n}\r\n\r\nconst u = undefined;\r\nconst LOCALE_DATA: { [localeId: string]: any } = {};\r\n\r\nfunction getLocaleData(normalizedLocale: string): any {\r\n  return LOCALE_DATA[normalizedLocale];\r\n}\r\n\r\nconst localeEn = [\r\n  'en',\r\n  [['a', 'p'], ['AM', 'PM'], u],\r\n  [['AM', 'PM'], u, u],\r\n  [\r\n    ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\r\n  ],\r\n  u,\r\n  [\r\n    ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\r\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    [\r\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n      'October', 'November', 'December'\r\n    ]\r\n  ],\r\n  u,\r\n  [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']],\r\n  0,\r\n  [6, 0],\r\n  ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\r\n  ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],\r\n  ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\r\n  ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],\r\n  ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'],\r\n  'USD',\r\n  '$',\r\n  'US Dollar',\r\n  {},\r\n  'ltr',\r\n  plural\r\n];\r\n\r\nexport function ɵfindLocaleData(locale: string): any {\r\n  const normalizedLocale = normalizeLocale(locale);\r\n\r\n  let match = getLocaleData(normalizedLocale);\r\n  if (match) {\r\n    return match;\r\n  }\r\n\r\n  // let's try to find a parent locale\r\n  const parentLocale = normalizedLocale.split('-')[0];\r\n  match = getLocaleData(parentLocale);\r\n  if (match) {\r\n    return match;\r\n  }\r\n\r\n  if (parentLocale === 'en') {\r\n    return localeEn;\r\n  }\r\n\r\n  throw new Error(`Missing locale data for the locale \"${locale}\".`);\r\n}\r\n\r\nexport enum ɵLocaleDataIndex {\r\n  LocaleId = 0,\r\n  DayPeriodsFormat,\r\n  DayPeriodsStandalone,\r\n  DaysFormat,\r\n  DaysStandalone,\r\n  MonthsFormat,\r\n  MonthsStandalone,\r\n  Eras,\r\n  FirstDayOfWeek,\r\n  WeekendRange,\r\n  DateFormat,\r\n  TimeFormat,\r\n  DateTimeFormat,\r\n  NumberSymbols,\r\n  NumberFormats,\r\n  CurrencyCode,\r\n  CurrencySymbol,\r\n  CurrencyName,\r\n  Currencies,\r\n  Directionality,\r\n  PluralCase,\r\n  ExtraData\r\n}\r\n","import { ɵfindLocaleData, ɵLocaleDataIndex } from './locale_data_core';\r\n\r\ntype Time = {\r\n  hours: number,\r\n  minutes: number\r\n};\r\n\r\nconst enum ɵExtraLocaleDataIndex {\r\n  ExtraDayPeriodFormats = 0,\r\n  ExtraDayPeriodStandalone,\r\n  ExtraDayPeriodsRules\r\n}\r\n\r\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\r\n  for (let i = index; i > -1; i--) {\r\n    if (typeof data[i] !== 'undefined') {\r\n      return data[i];\r\n    }\r\n  }\r\n  throw new Error('Locale data API: locale data undefined');\r\n}\r\n\r\nfunction checkFullData(data: any): void {\r\n  if (!data[ɵLocaleDataIndex.ExtraData]) {\r\n    throw new Error(`Missing extra locale data for the locale \"${data[ɵLocaleDataIndex\r\n      .LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\r\n  }\r\n}\r\n\r\nfunction extractTime(time: string): Time {\r\n  const [h, m] = time.split(':');\r\n  return { hours: +h, minutes: +m };\r\n}\r\n\r\nexport enum FormatWidth {\r\n  /**\r\n   * For `en-US`, 'M/d/yy, h:mm a'`\r\n   * (Example: `6/15/15, 9:03 AM`)\r\n   */\r\n  Short,\r\n  /**\r\n   * For `en-US`, `'MMM d, y, h:mm:ss a'`\r\n   * (Example: `Jun 15, 2015, 9:03:01 AM`)\r\n   */\r\n  Medium,\r\n  /**\r\n   * For `en-US`, `'MMMM d, y, h:mm:ss a z'`\r\n   * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)\r\n   */\r\n  Long,\r\n  /**\r\n   * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`\r\n   * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)\r\n   */\r\n  Full\r\n}\r\n\r\nexport enum FormStyle {\r\n  Format,\r\n  Standalone\r\n}\r\n\r\nexport function getLocaleId(locale: string): string {\r\n  return ɵfindLocaleData(locale)[ɵLocaleDataIndex.LocaleId];\r\n}\r\n\r\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\r\n  const data = ɵfindLocaleData(locale);\r\n  return getLastDefinedValue(data[ɵLocaleDataIndex.DateFormat], width);\r\n}\r\n\r\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\r\n  const data = ɵfindLocaleData(locale);\r\n  return getLastDefinedValue(data[ɵLocaleDataIndex.TimeFormat], width);\r\n}\r\n\r\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\r\n  const data = ɵfindLocaleData(locale);\r\n  const dateTimeFormatData = data[ɵLocaleDataIndex.DateTimeFormat] as string[];\r\n  return getLastDefinedValue(dateTimeFormatData, width);\r\n}\r\n\r\nexport function getLocaleMonthNames(\r\n  locale: string, formStyle: FormStyle, width: TranslationWidth): ReadonlyArray<string> {\r\n  const data = ɵfindLocaleData(locale);\r\n  const monthsData =\r\n    [data[ɵLocaleDataIndex.MonthsFormat], data[ɵLocaleDataIndex.MonthsStandalone]] as string[][][];\r\n  const months = getLastDefinedValue(monthsData, formStyle);\r\n  return getLastDefinedValue(months, width);\r\n}\r\n\r\nexport function getLocaleDayNames(\r\n  locale: string, formStyle: FormStyle, width: TranslationWidth): ReadonlyArray<string> {\r\n  const data = ɵfindLocaleData(locale);\r\n  const daysData =\r\n    [data[ɵLocaleDataIndex.DaysFormat], data[ɵLocaleDataIndex.DaysStandalone]] as string[][][];\r\n  const days = getLastDefinedValue(daysData, formStyle);\r\n  return getLastDefinedValue(days, width);\r\n}\r\n\r\nexport function getLocaleEraNames(\r\n  locale: string, width: TranslationWidth): Readonly<[string, string]> {\r\n  const data = ɵfindLocaleData(locale);\r\n  const erasData = data[ɵLocaleDataIndex.Eras] as [string, string][];\r\n  return getLastDefinedValue(erasData, width);\r\n}\r\n\r\nexport function getLocaleDayPeriods(\r\n  locale: string, formStyle: FormStyle, width: TranslationWidth): Readonly<[string, string]> {\r\n  const data = ɵfindLocaleData(locale);\r\n  const amPmData = [\r\n    data[ɵLocaleDataIndex.DayPeriodsFormat], data[ɵLocaleDataIndex.DayPeriodsStandalone]\r\n  ] as [string, string][][];\r\n  const amPm = getLastDefinedValue(amPmData, formStyle);\r\n  return getLastDefinedValue(amPm, width);\r\n}\r\n\r\nexport function getLocaleExtraDayPeriods(\r\n  locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\r\n  const data = ɵfindLocaleData(locale);\r\n  checkFullData(data);\r\n  const dayPeriodsData = [\r\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodFormats],\r\n    data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone]\r\n  ] as string[][][];\r\n  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\r\n  return getLastDefinedValue(dayPeriods, width) || [];\r\n}\r\n\r\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[] {\r\n  const data = ɵfindLocaleData(locale);\r\n  checkFullData(data);\r\n  const rules = data[ɵLocaleDataIndex.ExtraData][ɵExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\r\n  return rules.map((rule: string | [string, string]) => {\r\n    if (typeof rule === 'string') {\r\n      return extractTime(rule);\r\n    }\r\n    return [extractTime(rule[0]), extractTime(rule[1])];\r\n  });\r\n}\r\n\r\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\r\n  const data = ɵfindLocaleData(locale);\r\n  const res = data[ɵLocaleDataIndex.NumberSymbols][symbol];\r\n  if (typeof res === 'undefined') {\r\n    if (symbol === NumberSymbol.CurrencyDecimal) {\r\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\r\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\r\n      return data[ɵLocaleDataIndex.NumberSymbols][NumberSymbol.Group];\r\n    }\r\n  }\r\n  return res;\r\n}\r\n\r\nexport enum TranslationWidth {\r\n  /** 1 character for `en-US`. For example: 'S' */\r\n  Narrow,\r\n  /** 3 characters for `en-US`. For example: 'Sun' */\r\n  Abbreviated,\r\n  /** Full length for `en-US`. For example: \"Sunday\" */\r\n  Wide,\r\n  /** 2 characters for `en-US`, For example: \"Su\" */\r\n  Short\r\n}\r\n\r\nexport enum NumberSymbol {\r\n  /**\r\n   * Decimal separator.\r\n   * For `en-US`, the dot character.\r\n   * Example : 2,345`.`67\r\n   */\r\n  Decimal,\r\n  /**\r\n   * Grouping separator, typically for thousands.\r\n   * For `en-US`, the comma character.\r\n   * Example: 2`,`345.67\r\n   */\r\n  Group,\r\n  /**\r\n   * List-item separator.\r\n   * Example: \"one, two, and three\"\r\n   */\r\n  List,\r\n  /**\r\n   * Sign for percentage (out of 100).\r\n   * Example: 23.4%\r\n   */\r\n  PercentSign,\r\n  /**\r\n   * Sign for positive numbers.\r\n   * Example: +23\r\n   */\r\n  PlusSign,\r\n  /**\r\n   * Sign for negative numbers.\r\n   * Example: -23\r\n   */\r\n  MinusSign,\r\n  /**\r\n   * Computer notation for exponential value (n times a power of 10).\r\n   * Example: 1.2E3\r\n   */\r\n  Exponential,\r\n  /**\r\n   * Human-readable format of exponential.\r\n   * Example: 1.2x103\r\n   */\r\n  SuperscriptingExponent,\r\n  /**\r\n   * Sign for permille (out of 1000).\r\n   * Example: 23.4‰\r\n   */\r\n  PerMille,\r\n  /**\r\n   * Infinity, can be used with plus and minus.\r\n   * Example: ∞, +∞, -∞\r\n   */\r\n  Infinity,\r\n  /**\r\n   * Not a number.\r\n   * Example: NaN\r\n   */\r\n  NaN,\r\n  /**\r\n   * Symbol used between time units.\r\n   * Example: 10:52\r\n   */\r\n  TimeSeparator,\r\n  /**\r\n   * Decimal separator for currency values (fallback to `Decimal`).\r\n   * Example: $2,345.67\r\n   */\r\n  CurrencyDecimal,\r\n  /**\r\n   * Group separator for currency values (fallback to `Group`).\r\n   * Example: $2,345.67\r\n   */\r\n  CurrencyGroup\r\n}\r\n","import { FormatWidth, FormStyle, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleId, getLocaleMonthNames, getLocaleNumberSymbol, getLocaleTimeFormat, NumberSymbol, TranslationWidth } from './locale_data_api';\r\n\r\nconst ISO8601_DATE_REGEX = /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\r\nconst NAMED_FORMATS: { [localeId: string]: { [format: string]: string } } = {};\r\nconst DATE_FORMATS_SPLIT = /((?:[^GyYMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\r\n\r\nenum TranslationType {\r\n  DayPeriods,\r\n  Days,\r\n  Months,\r\n  Eras\r\n}\r\n\r\nenum ZoneWidth {\r\n  Short,\r\n  ShortGMT,\r\n  Long,\r\n  Extended\r\n}\r\n\r\nenum DateType {\r\n  FullYear,\r\n  Month,\r\n  Date,\r\n  Hours,\r\n  Minutes,\r\n  Seconds,\r\n  FractionalSeconds,\r\n  Day\r\n}\r\n\r\ntype DateFormatter = (date: Date, locale: string, offset: number) => string;\r\n\r\n/**\r\n * Formats a date according to locale rules.\r\n *\r\n * @param value The date to format, as a Date, or a number (milliseconds since UTC epoch)\r\n * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).\r\n * @param format The date-time components to include. See `DatePipe` for details.\r\n * @param locale A locale code for the locale format rules to use.\r\n * @param timezone The time zone. A time zone offset from GMT (such as `'+0430'`),\r\n * or a standard UTC/GMT or continental US time zone abbreviation.\r\n * If not specified, uses host system settings.\r\n *\r\n * @returns The formatted date string.\r\n *\r\n */\r\nexport function formatDate(\r\n  value: string | number | Date, format: string, locale: string, timezone?: string): string {\r\n  let date = toDate(value);\r\n  const namedFormat = getNamedFormat(locale, format);\r\n  format = namedFormat || format;\r\n\r\n  let parts: string[] = [];\r\n  let match;\r\n  while (format) {\r\n    match = DATE_FORMATS_SPLIT.exec(format);\r\n    if (match) {\r\n      parts = parts.concat(match.slice(1));\r\n      const part = parts.pop();\r\n      if (!part) {\r\n        break;\r\n      }\r\n      format = part;\r\n    } else {\r\n      parts.push(format);\r\n      break;\r\n    }\r\n  }\r\n\r\n  let dateTimezoneOffset = date.getTimezoneOffset();\r\n  if (timezone) {\r\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\r\n    date = convertTimezoneToLocal(date, timezone, true);\r\n  }\r\n\r\n  let text = '';\r\n  parts.forEach(partValue => {\r\n    const dateFormatter = getDateFormatter(partValue);\r\n    text += dateFormatter ?\r\n      dateFormatter(date, locale, dateTimezoneOffset) :\r\n      value === '\\'\\'' ? '\\'' : partValue.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\r\n  });\r\n\r\n  return text;\r\n}\r\n\r\n/**\r\n * Функция проверяет корректность переданного объекта Date.\r\n * @param value\r\n */\r\nexport function isDate(value: any): value is Date {\r\n  return value instanceof Date && !isNaN(value.valueOf());\r\n}\r\n\r\nfunction toDate(value: string | number | Date): Date {\r\n  if (isDate(value)) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === 'number' && !isNaN(value)) {\r\n    return new Date(value);\r\n  }\r\n\r\n  if (typeof value === 'string') {\r\n    value = value.trim();\r\n\r\n    if (/^(\\d{4}(-\\d{1,2}(-\\d{1,2})?)?)$/.test(value)) {\r\n      /* For ISO Strings without time the day, month and year must be extracted from the ISO String\r\n      before Date creation to avoid time offset and errors in the new Date.\r\n      If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\r\n      date, some browsers (e.g. IE 9) will throw an invalid Date error.\r\n      If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\r\n      is applied.\r\n      Note: ISO months are 0 for January, 1 for February, ... */\r\n      const [y, m = 1, d = 1] = value.split('-').map((val: string) => +val);\r\n      return new Date(y, m - 1, d);\r\n    }\r\n\r\n    const parsedNb = parseFloat(value);\r\n\r\n    // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\r\n    if (!isNaN(value as any - parsedNb)) {\r\n      return new Date(parsedNb);\r\n    }\r\n\r\n    const match: RegExpMatchArray | null = value.match(ISO8601_DATE_REGEX);\r\n    if (match) {\r\n      return isoStringToDate(match);\r\n    }\r\n  }\r\n\r\n  const date = new Date(value as any);\r\n  if (!isDate(date)) {\r\n    throw new Error(`Unable to convert \"${value}\" into a date`);\r\n  }\r\n  return date;\r\n}\r\n\r\nfunction getNamedFormat(locale: string, format: string): string {\r\n  const localeId = getLocaleId(locale);\r\n  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\r\n\r\n  if (NAMED_FORMATS[localeId][format]) {\r\n    return NAMED_FORMATS[localeId][format];\r\n  }\r\n\r\n  let formatValue = '';\r\n  switch (format) {\r\n    case 'shortDate':\r\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\r\n      break;\r\n    case 'mediumDate':\r\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\r\n      break;\r\n    case 'longDate':\r\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\r\n      break;\r\n    case 'fullDate':\r\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\r\n      break;\r\n    case 'shortTime':\r\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\r\n      break;\r\n    case 'mediumTime':\r\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\r\n      break;\r\n    case 'longTime':\r\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\r\n      break;\r\n    case 'fullTime':\r\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\r\n      break;\r\n    case 'short':\r\n      const shortTime = getNamedFormat(locale, 'shortTime');\r\n      const shortDate = getNamedFormat(locale, 'shortDate');\r\n      formatValue = formatDateTime(\r\n        getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\r\n      break;\r\n    case 'medium':\r\n      const mediumTime = getNamedFormat(locale, 'mediumTime');\r\n      const mediumDate = getNamedFormat(locale, 'mediumDate');\r\n      formatValue = formatDateTime(\r\n        getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\r\n      break;\r\n    case 'long':\r\n      const longTime = getNamedFormat(locale, 'longTime');\r\n      const longDate = getNamedFormat(locale, 'longDate');\r\n      formatValue =\r\n        formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\r\n      break;\r\n    case 'full':\r\n      const fullTime = getNamedFormat(locale, 'fullTime');\r\n      const fullDate = getNamedFormat(locale, 'fullDate');\r\n      formatValue =\r\n        formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\r\n      break;\r\n  }\r\n  if (formatValue) {\r\n    NAMED_FORMATS[localeId][format] = formatValue;\r\n  }\r\n  return formatValue;\r\n}\r\n\r\nconst DATE_FORMATS: { [format: string]: DateFormatter } = {};\r\n\r\n\r\nfunction getDateFormatter(format: string): DateFormatter | null {\r\n  if (DATE_FORMATS[format]) {\r\n    return DATE_FORMATS[format];\r\n  }\r\n  let formatter;\r\n  switch (format) {\r\n    // Era name (AD/BC)\r\n    case 'G':\r\n    case 'GG':\r\n    case 'GGG':\r\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\r\n      break;\r\n    case 'GGGG':\r\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\r\n      break;\r\n    case 'GGGGG':\r\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\r\n      break;\r\n\r\n    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\r\n    case 'y':\r\n      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\r\n      break;\r\n    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\r\n    case 'yy':\r\n      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\r\n      break;\r\n    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\r\n    case 'yyy':\r\n      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\r\n      break;\r\n    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\r\n    case 'yyyy':\r\n      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\r\n      break;\r\n\r\n    // 1 digit representation of the week-numbering year, e.g. (AD 1 => 1, AD 199 => 199)\r\n    case 'Y':\r\n      formatter = weekNumberingYearGetter(1);\r\n      break;\r\n    // 2 digit representation of the week-numbering year, padded (00-99). (e.g. AD 2001 => 01, AD\r\n    // 2010 => 10)\r\n    case 'YY':\r\n      formatter = weekNumberingYearGetter(2, true);\r\n      break;\r\n    // 3 digit representation of the week-numbering year, padded (000-999). (e.g. AD 1 => 001, AD\r\n    // 2010 => 2010)\r\n    case 'YYY':\r\n      formatter = weekNumberingYearGetter(3);\r\n      break;\r\n    // 4 digit representation of the week-numbering year (e.g. AD 1 => 0001, AD 2010 => 2010)\r\n    case 'YYYY':\r\n      formatter = weekNumberingYearGetter(4);\r\n      break;\r\n\r\n    // Month of the year (1-12), numeric\r\n    case 'M':\r\n    case 'L':\r\n      formatter = dateGetter(DateType.Month, 1, 1);\r\n      break;\r\n    case 'MM':\r\n    case 'LL':\r\n      formatter = dateGetter(DateType.Month, 2, 1);\r\n      break;\r\n\r\n    // Month of the year (January, ...), string, format\r\n    case 'MMM':\r\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\r\n      break;\r\n    case 'MMMM':\r\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\r\n      break;\r\n    case 'MMMMM':\r\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\r\n      break;\r\n\r\n    // Month of the year (January, ...), string, standalone\r\n    case 'LLL':\r\n      formatter =\r\n        dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\r\n      break;\r\n    case 'LLLL':\r\n      formatter =\r\n        dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\r\n      break;\r\n    case 'LLLLL':\r\n      formatter =\r\n        dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\r\n      break;\r\n\r\n    // Week of the year (1, ... 52)\r\n    case 'w':\r\n      formatter = weekGetter(1);\r\n      break;\r\n    case 'ww':\r\n      formatter = weekGetter(2);\r\n      break;\r\n\r\n    // Week of the month (1, ...)\r\n    case 'W':\r\n      formatter = weekGetter(1, true);\r\n      break;\r\n\r\n    // Day of the month (1-31)\r\n    case 'd':\r\n      formatter = dateGetter(DateType.Date, 1);\r\n      break;\r\n    case 'dd':\r\n      formatter = dateGetter(DateType.Date, 2);\r\n      break;\r\n\r\n    // Day of the Week\r\n    case 'E':\r\n    case 'EE':\r\n    case 'EEE':\r\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\r\n      break;\r\n    case 'EEEE':\r\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\r\n      break;\r\n    case 'EEEEE':\r\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\r\n      break;\r\n    case 'EEEEEE':\r\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\r\n      break;\r\n\r\n    // Generic period of the day (am-pm)\r\n    case 'a':\r\n    case 'aa':\r\n    case 'aaa':\r\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\r\n      break;\r\n    case 'aaaa':\r\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\r\n      break;\r\n    case 'aaaaa':\r\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\r\n      break;\r\n\r\n    // Extended period of the day (midnight, at night, ...), standalone\r\n    case 'b':\r\n    case 'bb':\r\n    case 'bbb':\r\n      formatter = dateStrGetter(\r\n        TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\r\n      break;\r\n    case 'bbbb':\r\n      formatter = dateStrGetter(\r\n        TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\r\n      break;\r\n    case 'bbbbb':\r\n      formatter = dateStrGetter(\r\n        TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\r\n      break;\r\n\r\n    // Extended period of the day (midnight, night, ...), standalone\r\n    case 'B':\r\n    case 'BB':\r\n    case 'BBB':\r\n      formatter = dateStrGetter(\r\n        TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\r\n      break;\r\n    case 'BBBB':\r\n      formatter =\r\n        dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\r\n      break;\r\n    case 'BBBBB':\r\n      formatter = dateStrGetter(\r\n        TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\r\n      break;\r\n\r\n    // Hour in AM/PM, (1-12)\r\n    case 'h':\r\n      formatter = dateGetter(DateType.Hours, 1, -12);\r\n      break;\r\n    case 'hh':\r\n      formatter = dateGetter(DateType.Hours, 2, -12);\r\n      break;\r\n\r\n    // Hour of the day (0-23)\r\n    case 'H':\r\n      formatter = dateGetter(DateType.Hours, 1);\r\n      break;\r\n    // Hour in day, padded (00-23)\r\n    case 'HH':\r\n      formatter = dateGetter(DateType.Hours, 2);\r\n      break;\r\n\r\n    // Minute of the hour (0-59)\r\n    case 'm':\r\n      formatter = dateGetter(DateType.Minutes, 1);\r\n      break;\r\n    case 'mm':\r\n      formatter = dateGetter(DateType.Minutes, 2);\r\n      break;\r\n\r\n    // Second of the minute (0-59)\r\n    case 's':\r\n      formatter = dateGetter(DateType.Seconds, 1);\r\n      break;\r\n    case 'ss':\r\n      formatter = dateGetter(DateType.Seconds, 2);\r\n      break;\r\n\r\n    // Fractional second\r\n    case 'S':\r\n      formatter = dateGetter(DateType.FractionalSeconds, 1);\r\n      break;\r\n    case 'SS':\r\n      formatter = dateGetter(DateType.FractionalSeconds, 2);\r\n      break;\r\n    case 'SSS':\r\n      formatter = dateGetter(DateType.FractionalSeconds, 3);\r\n      break;\r\n\r\n\r\n    // Timezone ISO8601 short format (-0430)\r\n    case 'Z':\r\n    case 'ZZ':\r\n    case 'ZZZ':\r\n      formatter = timeZoneGetter(ZoneWidth.Short);\r\n      break;\r\n    // Timezone ISO8601 extended format (-04:30)\r\n    case 'ZZZZZ':\r\n      formatter = timeZoneGetter(ZoneWidth.Extended);\r\n      break;\r\n\r\n    // Timezone GMT short format (GMT+4)\r\n    case 'O':\r\n    case 'OO':\r\n    case 'OOO':\r\n    // Should be location, but fallback to format O instead because we don't have the data yet\r\n    case 'z':\r\n    case 'zz':\r\n    case 'zzz':\r\n      formatter = timeZoneGetter(ZoneWidth.ShortGMT);\r\n      break;\r\n    // Timezone GMT long format (GMT+0430)\r\n    case 'OOOO':\r\n    case 'ZZZZ':\r\n    // Should be location, but fallback to format O instead because we don't have the data yet\r\n    case 'zzzz':\r\n      formatter = timeZoneGetter(ZoneWidth.Long);\r\n      break;\r\n    default:\r\n      return null;\r\n  }\r\n  DATE_FORMATS[format] = formatter;\r\n  return formatter;\r\n}\r\n\r\nfunction dateStrGetter(\r\n  name: TranslationType, width: TranslationWidth, form: FormStyle = FormStyle.Format,\r\n  extended = false): DateFormatter {\r\n  return function(date: Date, locale: string): string {\r\n    return getDateTranslation(date, locale, name, width, form, extended);\r\n  };\r\n}\r\n\r\nfunction dateGetter(\r\n  name: DateType, size: number, offset: number = 0, trim = false,\r\n  negWrap = false): DateFormatter {\r\n  return function(date: Date, locale: string): string {\r\n    let part = getDatePart(name, date);\r\n    if (offset > 0 || part > -offset) {\r\n      part += offset;\r\n    }\r\n\r\n    if (name === DateType.Hours) {\r\n      if (part === 0 && offset === -12) {\r\n        part = 12;\r\n      }\r\n    } else if (name === DateType.FractionalSeconds) {\r\n      return formatFractionalSeconds(part, size);\r\n    }\r\n\r\n    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\r\n    return padNumber(part, size, localeMinus, trim, negWrap);\r\n  };\r\n}\r\n\r\nfunction getDateTranslation(\r\n  date: Date, locale: string, name: TranslationType, width: TranslationWidth, form: FormStyle,\r\n  extended: boolean): string {\r\n  switch (name) {\r\n    case TranslationType.Months:\r\n      return getLocaleMonthNames(locale, form, width)[date.getMonth()];\r\n    case TranslationType.Days:\r\n      return getLocaleDayNames(locale, form, width)[date.getDay()];\r\n    case TranslationType.DayPeriods:\r\n      const currentHours = date.getHours();\r\n      const currentMinutes = date.getMinutes();\r\n      if (extended) {\r\n        const rules = getLocaleExtraDayPeriodRules(locale);\r\n        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\r\n        const index = rules.findIndex(rule => {\r\n          if (Array.isArray(rule)) {\r\n            // morning, afternoon, evening, night\r\n            const [from, to] = rule;\r\n            const afterFrom = currentHours >= from.hours && currentMinutes >= from.minutes;\r\n            const beforeTo =\r\n              (currentHours < to.hours ||\r\n                (currentHours === to.hours && currentMinutes < to.minutes));\r\n            // We must account for normal rules that span a period during the day (e.g. 6am-9am)\r\n            // where `from` is less (earlier) than `to`. But also rules that span midnight (e.g.\r\n            // 10pm - 5am) where `from` is greater (later!) than `to`.\r\n            //\r\n            // In the first case the current time must be BOTH after `from` AND before `to`\r\n            // (e.g. 8am is after 6am AND before 10am).\r\n            //\r\n            // In the second case the current time must be EITHER after `from` OR before `to`\r\n            // (e.g. 4am is before 5am but not after 10pm; and 11pm is not before 5am but it is\r\n            // after 10pm).\r\n            if (from.hours < to.hours) {\r\n              if (afterFrom && beforeTo) {\r\n                return true;\r\n              }\r\n            } else if (afterFrom || beforeTo) {\r\n              return true;\r\n            }\r\n          } else {  // noon or midnight\r\n            if (rule.hours === currentHours && rule.minutes === currentMinutes) {\r\n              return true;\r\n            }\r\n          }\r\n          return false;\r\n        });\r\n        if (index !== -1) {\r\n          return dayPeriods[index];\r\n        }\r\n      }\r\n      // if no rules for the day periods, we use am/pm by default\r\n      return getLocaleDayPeriods(locale, form, width as TranslationWidth)[currentHours < 12 ? 0 : 1];\r\n    case TranslationType.Eras:\r\n      return getLocaleEraNames(locale, width as TranslationWidth)[date.getFullYear() <= 0 ? 0 : 1];\r\n    default:\r\n      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\r\n      // However Closure Compiler does not understand that and reports an error in typed mode.\r\n      // The `throw new Error` below works around the problem, and the unexpected: never variable\r\n      // makes sure tsc still checks this code is unreachable.\r\n      const unexpected: never = name;\r\n      throw new Error(`unexpected translation type ${unexpected}`);\r\n  }\r\n}\r\n\r\nfunction timezoneToOffset(timezone: string, fallback: number): number {\r\n  // Support: IE 11 only, Edge 13-15+\r\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\r\n  timezone = timezone.replace(/:/g, '');\r\n  const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\r\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\r\n}\r\n\r\nfunction addDateMinutes(date: Date, minutes: number): Date {\r\n  date = new Date(date.getTime());\r\n  date.setMinutes(date.getMinutes() + minutes);\r\n  return date;\r\n}\r\n\r\nfunction convertTimezoneToLocal(date: Date, timezone: string, reverse: boolean): Date {\r\n  const reverseValue = reverse ? -1 : 1;\r\n  const dateTimezoneOffset = date.getTimezoneOffset();\r\n  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\r\n  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\r\n}\r\n\r\nfunction isoStringToDate(match: RegExpMatchArray): Date {\r\n  const date = new Date(0);\r\n  let tzHour = 0;\r\n  let tzMin = 0;\r\n\r\n  // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\r\n  const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\r\n  const timeSetter = match[8] ? date.setUTCHours : date.setHours;\r\n\r\n  // if there is a timezone defined like \"+01:00\" or \"+0100\"\r\n  if (match[9]) {\r\n    tzHour = Number(match[9] + match[10]);\r\n    tzMin = Number(match[9] + match[11]);\r\n  }\r\n  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\r\n  const h = Number(match[4] || 0) - tzHour;\r\n  const m = Number(match[5] || 0) - tzMin;\r\n  const s = Number(match[6] || 0);\r\n  // The ECMAScript specification (https://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.11)\r\n  // defines that `DateTime` milliseconds should always be rounded down, so that `999.9ms`\r\n  // becomes `999ms`.\r\n  const ms = Math.floor(parseFloat('0.' + (match[7] || 0)) * 1000);\r\n  timeSetter.call(date, h, m, s, ms);\r\n  return date;\r\n}\r\n\r\nfunction formatDateTime(str: string, optValues: string[]): string {\r\n  if (optValues) {\r\n    str = str.replace(/\\{([^}]+)}/g, function(match: string, key): string {\r\n      return (optValues != null && key in optValues) ? optValues[key] : match;\r\n    });\r\n  }\r\n  return str;\r\n}\r\n\r\n\r\n\r\nconst JANUARY = 0;\r\nconst THURSDAY = 4;\r\n\r\nfunction weekNumberingYearGetter(size: number, trim = false): DateFormatter {\r\n  return function(date: Date, locale: string): string {\r\n    const thisThurs = getThursdayThisWeek(date);\r\n    const weekNumberingYear = thisThurs.getFullYear();\r\n    return padNumber(\r\n      weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);\r\n  };\r\n}\r\n\r\nfunction weekGetter(size: number, monthBased = false): DateFormatter {\r\n  return function(date: Date, locale: string): string {\r\n    let result;\r\n    if (monthBased) {\r\n      const nbDaysBefore1stDayOfMonth =\r\n        new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\r\n      const today = date.getDate();\r\n      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\r\n    } else {\r\n      const thisThurs = getThursdayThisWeek(date);\r\n      // Some days of a year are part of next year according to ISO 8601.\r\n      // Compute the firstThurs from the year of this week's Thursday\r\n      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());\r\n      const diff = thisThurs.getTime() - firstThurs.getTime();\r\n      result = 1 + Math.round(diff / 6.048e8);  // 6.048e8 ms per week\r\n    }\r\n\r\n    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\r\n  };\r\n}\r\n\r\nfunction timeZoneGetter(width: ZoneWidth): DateFormatter {\r\n  return function(date: Date, locale: string, offset: number): string {\r\n    const zone = -1 * offset;\r\n    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\r\n    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\r\n    switch (width) {\r\n      case ZoneWidth.Short:\r\n        return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\r\n          padNumber(Math.abs(zone % 60), 2, minusSign);\r\n      case ZoneWidth.ShortGMT:\r\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\r\n      case ZoneWidth.Long:\r\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\r\n          padNumber(Math.abs(zone % 60), 2, minusSign);\r\n      case ZoneWidth.Extended:\r\n        if (offset === 0) {\r\n          return 'Z';\r\n        } else {\r\n          return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\r\n            padNumber(Math.abs(zone % 60), 2, minusSign);\r\n        }\r\n      default:\r\n        throw new Error(`Unknown zone width \"${width}\"`);\r\n    }\r\n  };\r\n}\r\n\r\nfunction padNumber(\r\n  num: number, digits: number, minusSign = '-', trim?: boolean, negWrap?: boolean): string {\r\n  let neg = '';\r\n  if (num < 0 || (negWrap && num <= 0)) {\r\n    if (negWrap) {\r\n      num = -num + 1;\r\n    } else {\r\n      num = -num;\r\n      neg = minusSign;\r\n    }\r\n  }\r\n  let strNum = String(num);\r\n  while (strNum.length < digits) {\r\n    strNum = '0' + strNum;\r\n  }\r\n  if (trim) {\r\n    strNum = strNum.substr(strNum.length - digits);\r\n  }\r\n  return neg + strNum;\r\n}\r\n\r\nfunction getDatePart(part: DateType, date: Date): number {\r\n  switch (part) {\r\n    case DateType.FullYear:\r\n      return date.getFullYear();\r\n    case DateType.Month:\r\n      return date.getMonth();\r\n    case DateType.Date:\r\n      return date.getDate();\r\n    case DateType.Hours:\r\n      return date.getHours();\r\n    case DateType.Minutes:\r\n      return date.getMinutes();\r\n    case DateType.Seconds:\r\n      return date.getSeconds();\r\n    case DateType.FractionalSeconds:\r\n      return date.getMilliseconds();\r\n    case DateType.Day:\r\n      return date.getDay();\r\n    default:\r\n      throw new Error(`Unknown DateType value \"${part}\".`);\r\n  }\r\n}\r\n\r\nfunction formatFractionalSeconds(milliseconds: number, digits: number): string {\r\n  const strMs = padNumber(milliseconds, 3);\r\n  return strMs.substr(0, digits);\r\n}\r\n\r\n\r\n\r\n\r\nfunction getFirstThursdayOfYear(year: number): Date {\r\n  const firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\r\n  return new Date(\r\n    year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\r\n}\r\n\r\nfunction getThursdayThisWeek(datetime: Date): Date {\r\n  return new Date(\r\n    datetime.getFullYear(), datetime.getMonth(),\r\n    datetime.getDate() + (THURSDAY - datetime.getDay()));\r\n}\r\n","/**\r\n *Класс, содержащий статический метод, определяющий смещение часового пояса относительно GMT (+00:00) по переданной строке с названием таймзоны.\r\n *Создавать новый объект этого класса для использования метода не требуется.\r\n */\r\nexport class TimeZoneIdentifier {\r\n/**\r\n *Метод определяет смещение часового пояса относительно GMT (+00:00) по переданной строке с названием таймзоны.\r\n *@param zone - Строка с названием таймзоны ( например 'America/New_York').\r\n *@return  - Строка, представляющая смещение относительно GMT.\r\n *\r\n *Пример :\r\n *const offset = TimeZoneIdentifier.getTimeZoneGMTOffsetfromNameZone('Europe/Moscow');\r\n *console.log(offset) /// \"+03:00\"\r\n *\r\n * */\r\n  static getTimeZoneGMTOffsetfromNameZone(zone?: string): string {\r\n    if (!zone) {\r\n      zone = process.env.TZ ? process.env.TZ : Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    };\r\n\r\n    switch (zone) {\r\n      case 'Etc/GMT+12': return '-12:00';\r\n      case 'Etc/GMT+11': return '-11:00';\r\n      case 'Pacific/Midway': return '-11:00';\r\n      case 'Pacific/Niue': return '-11:00';\r\n      case 'Pacific/Pago_Pago': return '-11:00';\r\n      case 'America/Adak': return '-10:00';\r\n      case 'Etc/GMT+10': return '-10:00';\r\n      case 'Pacific/Honolulu': return '-10:00';\r\n      case 'Pacific/Rarotonga': return '-10:00';\r\n      case 'Pacific/Tahiti': return '-10:00';\r\n      case 'Pacific/Marquesas': return '-09:30';\r\n      case 'America/Anchorage': return '-09:00';\r\n      case 'America/Juneau': return '-09:00';\r\n      case 'America/Metlakatla': return '-09:00';\r\n      case 'America/Nome': return '-09:00';\r\n      case 'America/Sitka': return '-09:00';\r\n      case 'America/Yakutat': return '-09:00';\r\n      case 'Etc/GMT+9': return '-09:00';\r\n      case 'Pacific/Gambier': return '-09:00';\r\n      case 'America/Los_Angeles': return '-08:00';\r\n      case 'America/Tijuana': return '-08:00';\r\n      case 'America/Vancouver': return '-08:00';\r\n      case 'Etc/GMT+8': return '-08:00';\r\n      case 'Pacific/Pitcairn': return '-08:00';\r\n      case 'America/Boise': return '-07:00';\r\n      case 'America/Cambridge_Bay': return '-07:00';\r\n      case 'America/Chihuahua': return '-07:00';\r\n      case 'America/Creston': return '-07:00';\r\n      case 'America/Dawson': return '-07:00';\r\n      case 'America/Dawson_Creek': return '-07:00';\r\n      case 'America/Denver': return '-07:00';\r\n      case 'America/Edmonton': return '-07:00';\r\n      case 'America/Fort_Nelson': return '-07:00';\r\n      case 'America/Hermosillo': return '-07:00';\r\n      case 'America/Inuvik': return '-07:00';\r\n      case 'America/Mazatlan': return '-07:00';\r\n      case 'America/Ojinaga': return '-07:00';\r\n      case 'America/Phoenix': return '-07:00';\r\n      case 'America/Whitehorse': return '-07:00';\r\n      case 'America/Yellowknife': return '-07:00';\r\n      case 'Etc/GMT+7': return '-07:00';\r\n      case 'America/Bahia_Banderas': return '-06:00';\r\n      case 'America/Belize': return '-06:00';\r\n      case 'America/Chicago': return '-06:00';\r\n      case 'America/Costa_Rica': return '-06:00';\r\n      case 'America/El_Salvador': return '-06:00';\r\n      case 'America/Guatemala': return '-06:00';\r\n      case 'America/Indiana/Knox': return '-06:00';\r\n      case 'America/Indiana/Tell_City': return '-06:00';\r\n      case 'America/Managua': return '-06:00';\r\n      case 'America/Matamoros': return '-06:00';\r\n      case 'America/Menominee': return '-06:00';\r\n      case 'America/Merida': return '-06:00';\r\n      case 'America/Mexico_City': return '-06:00';\r\n      case 'America/Monterrey': return '-06:00';\r\n      case 'America/North_Dakota/Beulah': return '-06:00';\r\n      case 'America/North_Dakota/Center': return '-06:00';\r\n      case 'America/North_Dakota/New_Salem': return '-06:00';\r\n      case 'America/Rainy_River': return '-06:00';\r\n      case 'America/Rankin_Inlet': return '-06:00';\r\n      case 'America/Regina': return '-06:00';\r\n      case 'America/Resolute': return '-06:00';\r\n      case 'America/Swift_Current': return '-06:00';\r\n      case 'America/Tegucigalpa': return '-06:00';\r\n      case 'America/Winnipeg': return '-06:00';\r\n      case 'Etc/GMT+6': return '-06:00';\r\n      case 'Pacific/Easter': return '-06:00';\r\n      case 'Pacific/Galapagos': return '-06:00';\r\n      case 'America/Atikokan': return '-05:00';\r\n      case 'America/Bogota': return '-05:00';\r\n      case 'America/Cancun': return '-05:00';\r\n      case 'America/Cayman': return '-05:00';\r\n      case 'America/Detroit': return '-05:00';\r\n      case 'America/Eirunepe': return '-05:00';\r\n      case 'America/Grand_Turk': return '-05:00';\r\n      case 'America/Guayaquil': return '-05:00';\r\n      case 'America/Havana': return '-05:00';\r\n      case 'America/Indiana/Indianapolis': return '-05:00';\r\n      case 'America/Indiana/Marengo': return '-05:00';\r\n      case 'America/Indiana/Petersburg': return '-05:00';\r\n      case 'America/Indiana/Vevay': return '-05:00';\r\n      case 'America/Indiana/Vincennes': return '-05:00';\r\n      case 'America/Indiana/Winamac': return '-05:00';\r\n      case 'America/Iqaluit': return '-05:00';\r\n      case 'America/Jamaica': return '-05:00';\r\n      case 'America/Kentucky/Louisville': return '-05:00';\r\n      case 'America/Kentucky/Monticello': return '-05:00';\r\n      case 'America/Lima': return '-05:00';\r\n      case 'America/Nassau': return '-05:00';\r\n      case 'America/New_York': return '-05:00';\r\n      case 'America/Nipigon': return '-05:00';\r\n      case 'America/Panama': return '-05:00';\r\n      case 'America/Pangnirtung': return '-05:00';\r\n      case 'America/Port-au-Prince': return '-05:00';\r\n      case 'America/Rio_Branco': return '-05:00';\r\n      case 'America/Thunder_Bay': return '-05:00';\r\n      case 'America/Toronto': return '-05:00';\r\n      case 'Etc/GMT+5': return '-05:00';\r\n      case 'America/Anguilla': return '-04:00';\r\n      case 'America/Antigua': return '-04:00';\r\n      case 'America/Aruba': return '-04:00';\r\n      case 'America/Asuncion': return '-04:00';\r\n      case 'America/Barbados': return '-04:00';\r\n      case 'America/Blanc-Sablon': return '-04:00';\r\n      case 'America/Boa_Vista': return '-04:00';\r\n      case 'America/Campo_Grande': return '-04:00';\r\n      case 'America/Caracas': return '-04:00';\r\n      case 'America/Cuiaba': return '-04:00';\r\n      case 'America/Curacao': return '-04:00';\r\n      case 'America/Dominica': return '-04:00';\r\n      case 'America/Glace_Bay': return '-04:00';\r\n      case 'America/Goose_Bay': return '-04:00';\r\n      case 'America/Grenada': return '-04:00';\r\n      case 'America/Guadeloupe': return '-04:00';\r\n      case 'America/Guyana': return '-04:00';\r\n      case 'America/Halifax': return '-04:00';\r\n      case 'America/Kralendijk': return '-04:00';\r\n      case 'America/La_Paz': return '-04:00';\r\n      case 'America/Lower_Princes': return '-04:00';\r\n      case 'America/Manaus': return '-04:00';\r\n      case 'America/Marigot': return '-04:00';\r\n      case 'America/Martinique': return '-04:00';\r\n      case 'America/Moncton': return '-04:00';\r\n      case 'America/Montserrat': return '-04:00';\r\n      case 'America/Port_of_Spain': return '-04:00';\r\n      case 'America/Porto_Velho': return '-04:00';\r\n      case 'America/Puerto_Rico': return '-04:00';\r\n      case 'America/Santiago': return '-04:00';\r\n      case 'America/Santo_Domingo': return '-04:00';\r\n      case 'America/St_Barthelemy': return '-04:00';\r\n      case 'America/St_Kitts': return '-04:00';\r\n      case 'America/St_Lucia': return '-04:00';\r\n      case 'America/St_Thomas': return '-04:00';\r\n      case 'America/St_Vincent': return '-04:00';\r\n      case 'America/Thule': return '-04:00';\r\n      case 'America/Tortola': return '-04:00';\r\n      case 'Atlantic/Bermuda': return '-04:00';\r\n      case 'Etc/GMT+4': return '-04:00';\r\n      case 'America/St_Johns': return '-03:30';\r\n      case 'America/Araguaina': return '-03:00';\r\n      case 'America/Argentina/Buenos_Aires': return '-03:00';\r\n      case 'America/Argentina/Catamarca': return '-03:00';\r\n      case 'America/Argentina/Cordoba': return '-03:00';\r\n      case 'America/Argentina/Jujuy': return '-03:00';\r\n      case 'America/Argentina/La_Rioja': return '-03:00';\r\n      case 'America/Argentina/Mendoza': return '-03:00';\r\n      case 'America/Argentina/Rio_Gallegos': return '-03:00';\r\n      case 'America/Argentina/Salta': return '-03:00';\r\n      case 'America/Argentina/San_Juan': return '-03:00';\r\n      case 'America/Argentina/San_Luis': return '-03:00';\r\n      case 'America/Argentina/Tucuman': return '-03:00';\r\n      case 'America/Argentina/Ushuaia': return '-03:00';\r\n      case 'America/Bahia': return '-03:00';\r\n      case 'America/Belem': return '-03:00';\r\n      case 'America/Cayenne': return '-03:00';\r\n      case 'America/Fortaleza': return '-03:00';\r\n      case 'America/Maceio': return '-03:00';\r\n      case 'America/Miquelon': return '-03:00';\r\n      case 'America/Montevideo': return '-03:00';\r\n      case 'America/Nuuk': return '-03:00';\r\n      case 'America/Paramaribo': return '-03:00';\r\n      case 'America/Punta_Arenas': return '-03:00';\r\n      case 'America/Recife': return '-03:00';\r\n      case 'America/Santarem': return '-03:00';\r\n      case 'America/Sao_Paulo': return '-03:00';\r\n      case 'Antarctica/Palmer': return '-03:00';\r\n      case 'Antarctica/Rothera': return '-03:00';\r\n      case 'Atlantic/Stanley': return '-03:00';\r\n      case 'Etc/GMT+3': return '-03:00';\r\n      case 'America/Noronha': return '-02:00';\r\n      case 'Atlantic/South_Georgia': return '-02:00';\r\n      case 'Etc/GMT+2': return '-02:00';\r\n      case 'America/Scoresbysund': return '-01:00';\r\n      case 'Atlantic/Azores': return '-01:00';\r\n      case 'Atlantic/Cape_Verde': return '-01:00';\r\n      case 'Etc/GMT+1': return '-01:00';\r\n      case 'Africa/Abidjan': return '+00:00';\r\n      case 'Africa/Accra': return '+00:00';\r\n      case 'Africa/Bamako': return '+00:00';\r\n      case 'Africa/Banjul': return '+00:00';\r\n      case 'Africa/Bissau': return '+00:00';\r\n      case 'Africa/Conakry': return '+00:00';\r\n      case 'Africa/Dakar': return '+00:00';\r\n      case 'Africa/Freetown': return '+00:00';\r\n      case 'Africa/Lome': return '+00:00';\r\n      case 'Africa/Monrovia': return '+00:00';\r\n      case 'Africa/Nouakchott': return '+00:00';\r\n      case 'Africa/Ouagadougou': return '+00:00';\r\n      case 'Africa/Sao_Tome': return '+00:00';\r\n      case 'America/Danmarkshavn': return '+00:00';\r\n      case 'Antarctica/Troll': return '+00:00';\r\n      case 'Atlantic/Canary': return '+00:00';\r\n      case 'Atlantic/Faroe': return '+00:00';\r\n      case 'Atlantic/Madeira': return '+00:00';\r\n      case 'Atlantic/Reykjavik': return '+00:00';\r\n      case 'Atlantic/St_Helena': return '+00:00';\r\n      case 'Etc/GMT': return '+00:00';\r\n      case 'Etc/GMT+0': return '+00:00';\r\n      case 'Etc/GMT-0': return '+00:00';\r\n      case 'Etc/GMT0': return '+00:00';\r\n      case 'Etc/UTC': return '+00:00';\r\n      case 'Europe/Guernsey': return '+00:00';\r\n      case 'Europe/Isle_of_Man': return '+00:00';\r\n      case 'Europe/Jersey': return '+00:00';\r\n      case 'Europe/Lisbon': return '+00:00';\r\n      case 'Europe/London': return '+00:00';\r\n      case 'Factory': return '+00:00';\r\n      case 'GMT': return '+00:00';\r\n      case 'UTC': return '+00:00';\r\n      case 'Africa/Algiers': return '+01:00';\r\n      case 'Africa/Bangui': return '+01:00';\r\n      case 'Africa/Brazzaville': return '+01:00';\r\n      case 'Africa/Casablanca': return '+01:00';\r\n      case 'Africa/Ceuta': return '+01:00';\r\n      case 'Africa/Douala': return '+01:00';\r\n      case 'Africa/El_Aaiun': return '+01:00';\r\n      case 'Africa/Kinshasa': return '+01:00';\r\n      case 'Africa/Lagos': return '+01:00';\r\n      case 'Africa/Libreville': return '+01:00';\r\n      case 'Africa/Luanda': return '+01:00';\r\n      case 'Africa/Malabo': return '+01:00';\r\n      case 'Africa/Ndjamena': return '+01:00';\r\n      case 'Africa/Niamey': return '+01:00';\r\n      case 'Africa/Porto-Novo': return '+01:00';\r\n      case 'Africa/Tunis': return '+01:00';\r\n      case 'Arctic/Longyearbyen': return '+01:00';\r\n      case 'Etc/GMT-1': return '+01:00';\r\n      case 'Europe/Amsterdam': return '+01:00';\r\n      case 'Europe/Andorra': return '+01:00';\r\n      case 'Europe/Belgrade': return '+01:00';\r\n      case 'Europe/Berlin': return '+01:00';\r\n      case 'Europe/Bratislava': return '+01:00';\r\n      case 'Europe/Brussels': return '+01:00';\r\n      case 'Europe/Budapest': return '+01:00';\r\n      case 'Europe/Busingen': return '+01:00';\r\n      case 'Europe/Copenhagen': return '+01:00';\r\n      case 'Europe/Dublin': return '+01:00';\r\n      case 'Europe/Gibraltar': return '+01:00';\r\n      case 'Europe/Ljubljana': return '+01:00';\r\n      case 'Europe/Luxembourg': return '+01:00';\r\n      case 'Europe/Madrid': return '+01:00';\r\n      case 'Europe/Malta': return '+01:00';\r\n      case 'Europe/Monaco': return '+01:00';\r\n      case 'Europe/Oslo': return '+01:00';\r\n      case 'Europe/Paris': return '+01:00';\r\n      case 'Europe/Podgorica': return '+01:00';\r\n      case 'Europe/Prague': return '+01:00';\r\n      case 'Europe/Rome': return '+01:00';\r\n      case 'Europe/San_Marino': return '+01:00';\r\n      case 'Europe/Sarajevo': return '+01:00';\r\n      case 'Europe/Skopje': return '+01:00';\r\n      case 'Europe/Stockholm': return '+01:00';\r\n      case 'Europe/Tirane': return '+01:00';\r\n      case 'Europe/Vaduz': return '+01:00';\r\n      case 'Europe/Vatican': return '+01:00';\r\n      case 'Europe/Vienna': return '+01:00';\r\n      case 'Europe/Warsaw': return '+01:00';\r\n      case 'Europe/Zagreb': return '+01:00';\r\n      case 'Europe/Zurich': return '+01:00';\r\n      case 'Africa/Blantyre': return '+02:00';\r\n      case 'Africa/Bujumbura': return '+02:00';\r\n      case 'Africa/Cairo': return '+02:00';\r\n      case 'Africa/Gaborone': return '+02:00';\r\n      case 'Africa/Harare': return '+02:00';\r\n      case 'Africa/Johannesburg': return '+02:00';\r\n      case 'Africa/Khartoum': return '+02:00';\r\n      case 'Africa/Kigali': return '+02:00';\r\n      case 'Africa/Lubumbashi': return '+02:00';\r\n      case 'Africa/Lusaka': return '+02:00';\r\n      case 'Africa/Maputo': return '+02:00';\r\n      case 'Africa/Maseru': return '+02:00';\r\n      case 'Africa/Mbabane': return '+02:00';\r\n      case 'Africa/Tripoli': return '+02:00';\r\n      case 'Africa/Windhoek': return '+02:00';\r\n      case 'Asia/Amman': return '+02:00';\r\n      case 'Asia/Beirut': return '+02:00';\r\n      case 'Asia/Damascus': return '+02:00';\r\n      case 'Asia/Famagusta': return '+02:00';\r\n      case 'Asia/Gaza': return '+02:00';\r\n      case 'Asia/Hebron': return '+02:00';\r\n      case 'Asia/Jerusalem': return '+02:00';\r\n      case 'Asia/Nicosia': return '+02:00';\r\n      case 'Etc/GMT-2': return '+02:00';\r\n      case 'Europe/Athens': return '+02:00';\r\n      case 'Europe/Bucharest': return '+02:00';\r\n      case 'Europe/Chisinau': return '+02:00';\r\n      case 'Europe/Helsinki': return '+02:00';\r\n      case 'Europe/Kaliningrad': return '+02:00';\r\n      case 'Europe/Kiev': return '+02:00';\r\n      case 'Europe/Mariehamn': return '+02:00';\r\n      case 'Europe/Nicosia': return '+02:00';\r\n      case 'Europe/Riga': return '+02:00';\r\n      case 'Europe/Sofia': return '+02:00';\r\n      case 'Europe/Tallinn': return '+02:00';\r\n      case 'Europe/Uzhgorod': return '+02:00';\r\n      case 'Europe/Vilnius': return '+02:00';\r\n      case 'Europe/Zaporozhye': return '+02:00';\r\n      case 'Africa/Addis_Ababa': return '+03:00';\r\n      case 'Africa/Asmara': return '+03:00';\r\n      case 'Africa/Dar_es_Salaam': return '+03:00';\r\n      case 'Africa/Djibouti': return '+03:00';\r\n      case 'Africa/Juba': return '+03:00';\r\n      case 'Africa/Kampala': return '+03:00';\r\n      case 'Africa/Mogadishu': return '+03:00';\r\n      case 'Africa/Nairobi': return '+03:00';\r\n      case 'Antarctica/Syowa': return '+03:00';\r\n      case 'Asia/Aden': return '+03:00';\r\n      case 'Asia/Baghdad': return '+03:00';\r\n      case 'Asia/Bahrain': return '+03:00';\r\n      case 'Asia/Istanbul': return '+03:00';\r\n      case 'Asia/Kuwait': return '+03:00';\r\n      case 'Asia/Qatar': return '+03:00';\r\n      case 'Asia/Riyadh': return '+03:00';\r\n      case 'Etc/GMT-3': return '+03:00';\r\n      case 'Europe/Istanbul': return '+03:00';\r\n      case 'Europe/Kirov': return '+03:00';\r\n      case 'Europe/Minsk': return '+03:00';\r\n      case 'Europe/Moscow': return '+03:00';\r\n      case 'Europe/Simferopol': return '+03:00';\r\n      case 'Europe/Volgograd': return '+03:00';\r\n      case 'Indian/Antananarivo': return '+03:00';\r\n      case 'Indian/Comoro': return '+03:00';\r\n      case 'Indian/Mayotte': return '+03:00';\r\n      case 'Asia/Tehran': return '+03:30';\r\n      case 'Asia/Baku': return '+04:00';\r\n      case 'Asia/Dubai': return '+04:00';\r\n      case 'Asia/Muscat': return '+04:00';\r\n      case 'Asia/Tbilisi': return '+04:00';\r\n      case 'Asia/Yerevan': return '+04:00';\r\n      case 'Etc/GMT-4': return '+04:00';\r\n      case 'Europe/Astrakhan': return '+04:00';\r\n      case 'Europe/Samara': return '+04:00';\r\n      case 'Europe/Saratov': return '+04:00';\r\n      case 'Europe/Ulyanovsk': return '+04:00';\r\n      case 'Indian/Mahe': return '+04:00';\r\n      case 'Indian/Mauritius': return '+04:00';\r\n      case 'Indian/Reunion': return '+04:00';\r\n      case 'Asia/Kabul': return '+04:30';\r\n      case 'Antarctica/Mawson': return '+05:00';\r\n      case 'Asia/Aqtau': return '+05:00';\r\n      case 'Asia/Aqtobe': return '+05:00';\r\n      case 'Asia/Ashgabat': return '+05:00';\r\n      case 'Asia/Atyrau': return '+05:00';\r\n      case 'Asia/Dushanbe': return '+05:00';\r\n      case 'Asia/Karachi': return '+05:00';\r\n      case 'Asia/Oral': return '+05:00';\r\n      case 'Asia/Qyzylorda': return '+05:00';\r\n      case 'Asia/Samarkand': return '+05:00';\r\n      case 'Asia/Tashkent': return '+05:00';\r\n      case 'Asia/Yekaterinburg': return '+05:00';\r\n      case 'Etc/GMT-5': return '+05:00';\r\n      case 'Indian/Kerguelen': return '+05:00';\r\n      case 'Indian/Maldives': return '+05:00';\r\n      case 'Asia/Colombo': return '+05:30';\r\n      case 'Asia/Kolkata': return '+05:30';\r\n      case 'Asia/Kathmandu': return '+05:45';\r\n      case 'Antarctica/Vostok': return '+06:00';\r\n      case 'Asia/Almaty': return '+06:00';\r\n      case 'Asia/Bishkek': return '+06:00';\r\n      case 'Asia/Dhaka': return '+06:00';\r\n      case 'Asia/Omsk': return '+06:00';\r\n      case 'Asia/Qostanay': return '+06:00';\r\n      case 'Asia/Thimphu': return '+06:00';\r\n      case 'Asia/Urumqi': return '+06:00';\r\n      case 'Etc/GMT-6': return '+06:00';\r\n      case 'Indian/Chagos': return '+06:00';\r\n      case 'Asia/Yangon': return '+06:30';\r\n      case 'Indian/Cocos': return '+06:30';\r\n      case 'Antarctica/Davis': return '+07:00';\r\n      case 'Asia/Bangkok': return '+07:00';\r\n      case 'Asia/Barnaul': return '+07:00';\r\n      case 'Asia/Ho_Chi_Minh': return '+07:00';\r\n      case 'Asia/Hovd': return '+07:00';\r\n      case 'Asia/Jakarta': return '+07:00';\r\n      case 'Asia/Krasnoyarsk': return '+07:00';\r\n      case 'Asia/Novokuznetsk': return '+07:00';\r\n      case 'Asia/Novosibirsk': return '+07:00';\r\n      case 'Asia/Phnom_Penh': return '+07:00';\r\n      case 'Asia/Pontianak': return '+07:00';\r\n      case 'Asia/Tomsk': return '+07:00';\r\n      case 'Asia/Vientiane': return '+07:00';\r\n      case 'Etc/GMT-7': return '+07:00';\r\n      case 'Indian/Christmas': return '+07:00';\r\n      case 'Asia/Brunei': return '+08:00';\r\n      case 'Asia/Choibalsan': return '+08:00';\r\n      case 'Asia/Hong_Kong': return '+08:00';\r\n      case 'Asia/Irkutsk': return '+08:00';\r\n      case 'Asia/Kuala_Lumpur': return '+08:00';\r\n      case 'Asia/Kuching': return '+08:00';\r\n      case 'Asia/Macau': return '+08:00';\r\n      case 'Asia/Makassar': return '+08:00';\r\n      case 'Asia/Manila': return '+08:00';\r\n      case 'Asia/Shanghai': return '+08:00';\r\n      case 'Asia/Singapore': return '+08:00';\r\n      case 'Asia/Taipei': return '+08:00';\r\n      case 'Asia/Ulaanbaatar': return '+08:00';\r\n      case 'Australia/Perth': return '+08:00';\r\n      case 'Etc/GMT-8': return '+08:00';\r\n      case 'Australia/Eucla': return '+08:45';\r\n      case 'Asia/Chita': return '+09:00';\r\n      case 'Asia/Dili': return '+09:00';\r\n      case 'Asia/Jayapura': return '+09:00';\r\n      case 'Asia/Khandyga': return '+09:00';\r\n      case 'Asia/Pyongyang': return '+09:00';\r\n      case 'Asia/Seoul': return '+09:00';\r\n      case 'Asia/Tokyo': return '+09:00';\r\n      case 'Asia/Yakutsk': return '+09:00';\r\n      case 'Etc/GMT-9': return '+09:00';\r\n      case 'Pacific/Palau': return '+09:00';\r\n      case 'Australia/Adelaide': return '+09:30';\r\n      case 'Australia/Broken_Hill': return '+09:30';\r\n      case 'Australia/Darwin': return '+09:30';\r\n      case 'Antarctica/DumontDUrville': return '+10:00';\r\n      case 'Antarctica/Macquarie': return '+10:00';\r\n      case 'Asia/Ust-Nera': return '+10:00';\r\n      case 'Asia/Vladivostok': return '+10:00';\r\n      case 'Australia/Brisbane': return '+10:00';\r\n      case 'Australia/Hobart': return '+10:00';\r\n      case 'Australia/Lindeman': return '+10:00';\r\n      case 'Australia/Melbourne': return '+10:00';\r\n      case 'Australia/Sydney': return '+10:00';\r\n      case 'Etc/GMT-10': return '+10:00';\r\n      case 'Pacific/Chuuk': return '+10:00';\r\n      case 'Pacific/Guam': return '+10:00';\r\n      case 'Pacific/Port_Moresby': return '+10:00';\r\n      case 'Pacific/Saipan': return '+10:00';\r\n      case 'Australia/Lord_Howe': return '+10:30';\r\n      case 'Antarctica/Casey': return '+11:00';\r\n      case 'Asia/Magadan': return '+11:00';\r\n      case 'Asia/Sakhalin': return '+11:00';\r\n      case 'Asia/Srednekolymsk': return '+11:00';\r\n      case 'Etc/GMT-11': return '+11:00';\r\n      case 'Pacific/Bougainville': return '+11:00';\r\n      case 'Pacific/Efate': return '+11:00';\r\n      case 'Pacific/Guadalcanal': return '+11:00';\r\n      case 'Pacific/Kosrae': return '+11:00';\r\n      case 'Pacific/Norfolk': return '+11:00';\r\n      case 'Pacific/Noumea': return '+11:00';\r\n      case 'Pacific/Pohnpei': return '+11:00';\r\n      case 'Antarctica/McMurdo': return '+12:00';\r\n      case 'Asia/Anadyr': return '+12:00';\r\n      case 'Asia/Kamchatka': return '+12:00';\r\n      case 'Etc/GMT-12': return '+12:00';\r\n      case 'Pacific/Auckland': return '+12:00';\r\n      case 'Pacific/Fiji': return '+12:00';\r\n      case 'Pacific/Funafuti': return '+12:00';\r\n      case 'Pacific/Kwajalein': return '+12:00';\r\n      case 'Pacific/Majuro': return '+12:00';\r\n      case 'Pacific/Nauru': return '+12:00';\r\n      case 'Pacific/Tarawa': return '+12:00';\r\n      case 'Pacific/Wake': return '+12:00';\r\n      case 'Pacific/Wallis': return '+12:00';\r\n      case 'Pacific/Chatham': return '+12:45';\r\n      case 'Etc/GMT-13': return '+13:00';\r\n      case 'Pacific/Apia': return '+13:00';\r\n      case 'Pacific/Enderbury': return '+13:00';\r\n      case 'Pacific/Fakaofo': return '+13:00';\r\n      case 'Pacific/Tongatapu': return '+13:00';\r\n      case 'Etc/GMT-14': return '+14:00';\r\n      case 'Pacific/Kiritimati': return '+14:00';\r\n      default: throw Error('Неизвестная таймзона');\r\n    }\r\n  }\r\n}\r\n","import { formatDate, isDate } from './formatDate';\r\nimport { TimeZoneIdentifier } from './tz';\r\n\r\n/**\r\n * Базовые данные о времени работы - служебный интерфейс.\r\n */\r\nexport interface WorkTimeBase {\r\n  /** время начала рабочего дня*/\r\n  start: string;\r\n\r\n  /** время окончания рабочего дня*/\r\n  stop: string;\r\n\r\n  /** перерыв на обед*/\r\n  break?: string;\r\n}\r\n\r\n/**\r\n * Информация о времени работы предприятия - служебный интерфейс.\r\n */\r\nexport interface WorkTime extends WorkTimeBase {\r\n  /** день недели, к которому применяется это время доставки   */\r\n  dayOfWeek: string | string[];\r\n\r\n  /** ограничения по времени работы для самовывоза */\r\n  selfService?: WorkTimeBase;\r\n}\r\n\r\n/**\r\n * Интерфейс объекта, получаемого от API @webresto/core и содержащего текущие данные о рабочем времени предприятия\r\n */\r\nexport interface Restrictions {\r\n  /** временная зона предприятия */\r\n  timezone?: string;\r\n\r\n  /**  массив ограничений по времени работы предприятия для разных дней недели. */\r\n  worktime: WorkTime[];\r\n}\r\n\r\nexport interface HtmlFormField {\r\n  id: string;\r\n  type: string;\r\n  label: string;\r\n  description: string;\r\n  required: boolean;\r\n  regex: string;\r\n}\r\n\r\nexport interface Country {\r\n  phoneCode: string;\r\n  iso: string;\r\n  name: string;\r\n  nativeCountryName: string;\r\n  language: string[];\r\n  currency: string;\r\n  currencySymbol: string;\r\n  currencyISO: string;\r\n  currencyUnit: string;\r\n  currencyDenomination: number;\r\n  phoneMask: string[];\r\n  flag: string;\r\n}\r\n\r\n/** Данные о модели авторизации пользователей на сайте предприятия */\r\nexport interface UserRestrictions {\r\n  /** Показывает, какой вид данных используется пользователем для авторизации */\r\n  loginField: string;\r\n\r\n  customFields?: HtmlFormField[] | null;\r\n\r\n  /**\r\n   * Отключен ли ЛК\r\n   */\r\n  accountsDisable: boolean;\r\n  /**\r\n   * Отключены ли бонусные программы\r\n   */\r\n  bonusProgramDisable: boolean;\r\n  /**\r\n   * Требуется ли для авторизации/регистрации ввод пароля\r\n   */\r\n  passwordRequired: boolean;\r\n  registrationOTPRequired: boolean;\r\n  /**\r\n   * Доступно ли восстановление пароля\r\n   */\r\n  allowRestorePassword: boolean;\r\n  /**\r\n   * Список стран, телефонные коды которых доступны для указания в номере телефона пользователя\r\n   */\r\n  allowedPhoneCountries: Country[];\r\n  /**\r\n   * Ссылка на политику обработки персональных данных\r\n   */\r\n  linkToProcessingPersonalData: boolean;\r\n  /**\r\n   * Ссылка на пользовательское соглашение\r\n   */\r\n  linkToUserAgreement: boolean;\r\n  /**\r\n   * Длина кода подтверждения OTP\r\n   */\r\n  OTPlength: number;\r\n}\r\n\r\nexport interface RestrictionsOrder extends Restrictions {\r\n  /** минимальное время доставки*/\r\n  minDeliveryTimeInMinutes: string;\r\n\r\n  /** ограничение максимальной даты заказа в будущем (в минутах)*/\r\n  possibleToOrderInMinutes: number;\r\n\r\n  /**  установлено ли на текущий момент ограничение доставки на определенное время */\r\n  deliveryToTimeEnabled?: boolean;\r\n\r\n  /** Дополнительный комментарий по доставке */\r\n  deliveryDescription?: string;\r\n\r\n  /** Разновидность вводимой капчи */\r\n  captchaType?: string | null;\r\n\r\n  /** Данные о модели авторизации пользователей на сайте предприятия */\r\n  user?: UserRestrictions | null;\r\n}\r\n\r\nexport interface ValidatorResult {\r\n  workNow: boolean;\r\n  isNewDay?: boolean;\r\n  currentTime?: number;\r\n  curentDayStartTime?: number;\r\n  curentDayStopTime?: number;\r\n}\r\n\r\n/** Тип, описывающий строковое представление всех цифр */\r\ntype Digits = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';\r\n\r\n/** Тип, описывающий строковое представление 24 часов одних суток */\r\nexport type HoursDigits =\r\n  | '00'\r\n  | '01'\r\n  | '02'\r\n  | '03'\r\n  | '04'\r\n  | '05'\r\n  | '06'\r\n  | '07'\r\n  | '08'\r\n  | '09'\r\n  | '10'\r\n  | '11'\r\n  | '12'\r\n  | '13'\r\n  | '14'\r\n  | '15'\r\n  | '16'\r\n  | '17'\r\n  | '18'\r\n  | '19'\r\n  | '20'\r\n  | '21'\r\n  | '22'\r\n  | '23';\r\n\r\n/** Тип, описывающий строковое представление 60 минут одного часа*/\r\nexport type MinuteDigits = `${'0' | '1' | '2' | '3' | '4' | '5'}${Digits}`;\r\n\r\n/** Тип, описывающий строковое представление времени в формате HH:mm -`(00-24 часа):(0-59 минут)` */\r\nexport type TimeString = `${HoursDigits}:${MinuteDigits}`;\r\n\r\n/**\r\n * Функция валидации переданного объекта restriction на соответствие интерфейсу Restrictions\r\n * @param restriction - проверяемый объект, содержащий информацию о рабочем времени и временной зоне.\r\n */\r\nfunction isValidRestriction(restriction: unknown): restriction is Restrictions {\r\n  return (\r\n    typeof restriction === 'object' &&\r\n    restriction !== null &&\r\n    'timezone' in restriction &&\r\n    'worktime' in restriction\r\n  );\r\n}\r\n\r\n/**\r\n * Функция валидации переданного объекта restriction на соответствие минимальным данным для заказа\r\n * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n */\r\nfunction isValidRestrictionOrder(\r\n  restriction: RestrictionsOrder\r\n): restriction is RestrictionsOrder {\r\n  return (\r\n    'minDeliveryTimeInMinutes' in restriction &&\r\n    'possibleToOrderInMinutes' in restriction &&\r\n    'timezone' in restriction &&\r\n    'worktime' in restriction\r\n  );\r\n}\r\n\r\n/**\r\n * Класс, содержащий статические методы, необходимые для работы с ограничениями рабочего времени предприятия.\r\n * Создавать новый экземпляр этого класса для использования статических методов не требуется.\r\n *\r\n * При этом при создании экземпляра класса у объекта также будут доступны собственные реализации\r\n * всех статических методов.\r\n * Эти реализации отличаются от вызовов статических методов только мемоизацией выполненных расчетов.\r\n *\r\n */\r\nexport class WorkTimeValidator {\r\n  /**\r\n   * Метод возвращает максимальную возможную дату, на которую можно заказать доставку.\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @return Строка, представляющая максимальную доступную дату доставки в формате yyyy-MM-dd.\r\n   */\r\n  static getMaxOrderDate(\r\n    restriction: RestrictionsOrder,\r\n    currentdate: Date\r\n  ): string {\r\n    if (\r\n      restriction &&\r\n      isValidRestrictionOrder(restriction) &&\r\n      isDate(currentdate)\r\n    ) {\r\n      return formatDate(\r\n        currentdate.getTime() + restriction.possibleToOrderInMinutes * 60000,\r\n        'yyyy-MM-dd',\r\n        'en'\r\n      );\r\n    } else {\r\n      throw new Error(\r\n        isDate(currentdate)\r\n          ? 'Не передан корректный объект даты'\r\n          : !restriction\r\n          ? 'Не передан объект restrictions'\r\n          : 'Передан невалидный обьект restrictions'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод считает, сколько минут от начала дня (00:00) прошло для переданного времени.\r\n   * @param time - строка в формате HH:mm -`(00-24 часа):(0-59 минут)` - время.\r\n   * @return кол-во минут.\r\n   */\r\n  static getTimeFromString(time: TimeString): number {\r\n    if (!time) {\r\n      throw 'Не передана строка с преобразуемым временем в формате HH:mm';\r\n    } else {\r\n      const regExp = new RegExp(\r\n        /^(00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23)+:([0-5]\\d)+/\r\n      );\r\n\r\n      if (regExp.test(time)) {\r\n        let checkedTime = time.trim();\r\n        if (checkedTime.includes(' ') || checkedTime.includes('T')) {\r\n          checkedTime = checkedTime.split(\r\n            checkedTime.includes(' ') ? ' ' : 'T'\r\n          )[1];\r\n        }\r\n\r\n        return +checkedTime.split(':')[0] * 60 + +checkedTime.split(':')[1];\r\n      } else {\r\n        throw 'Переданная строка не соответствует формату HH:mm -`(00-24 часа):(0-59 минут)`';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод конвертирует переданное кол-во минут в строкове представление времени в формате HH:mm - `(00-24 часа):(0-59 минут)`.\r\n   * Например:\r\n   *\r\n   * const a = convertMinutesToTime(50) // a = '00:50'\r\n   * const b = convertMinutesToTime(1200) // b = '20:00'\r\n   *\r\n   * @param time - Число в диапазоне от 0 до 1440 (так как максимум в 1 сутках = 1440 минут).\r\n   * При передаче в time отрицательного значения, знак будет \"отобршен\", а для метод вернет результат, рассчитанный для полученного положительного значения.\r\n   * Если в time будет передано значение больше 1440 - метод вернет результат для значения без учета \"превышающих суток\" (т.е. с кратным вычетом 1440 минут)\r\n   *\r\n   * Например:\r\n   *\r\n   * const a = convertMinutesToTime(60) // a = '01:00'\r\n   * const b = convertMinutesToTime(1500) // b = '01:00' (1440 минут \"целых\" суток были \"отброшены\")\r\n   *\r\n   * @returns\r\n   */\r\n  static convertMinutesToTime(time: number): TimeString {\r\n    if (time < 1441) {\r\n      const hour = Math.floor(time / 60);\r\n      const hourStr: HoursDigits = <HoursDigits>(\r\n        (hour <= 9 ? `0${String(hour)}` : String(hour))\r\n      );\r\n      const minutesStr: MinuteDigits = <MinuteDigits>String(time - hour * 60);\r\n      return `${hourStr}:${minutesStr}`;\r\n    } else {\r\n      return WorkTimeValidator.convertMinutesToTime(time - 1440);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод проверяет, доступна ли возможность доставки на ближайшее время.\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий локальные дату и время пользователя, для которых и проверяется возможность доставки\r\n   * @return Обьект, содержащий информацию:\r\n   * {\r\n        isWorkNow:boolean - Возможна ли доставка в ближайшее время\r\n        isNewDay:boolean - Служебный параметр для внутреннего использования.\r\n          Представляет признак, что из-за разницы часовых поясов расчет даты \"перепрыгнул\" на новый день.\r\n        currentTime:number - Служебный параметр для внутреннего использования.\r\n          Представляет проверяемое методом время в минутах от 00:00 в часовом поясе предприятия.\r\n        curentDayStartTime:number - Служебный параметр для внутреннего использования.\r\n          Представляет время начала рабочего дня в минутах от 00:00 в часовом поясе предприятия.\r\n        curentDayStopTime:number - Служебный параметр для внутреннего использования.\r\n          Представляет время окончания рабочего дня в минутах от 00:00 в часовом поясе предприятия.\r\n      }\r\n   */\r\n  static isWorkNow(\r\n    restriction: Restrictions | RestrictionsOrder,\r\n    currentdate: Date = new Date()\r\n  ): ValidatorResult {\r\n    if (!restriction.worktime || !Object.keys(restriction.worktime).length) {\r\n      return {\r\n        workNow: true,\r\n      };\r\n    }\r\n\r\n    // Если испольняется в NodeJS\r\n    if (typeof process !== 'undefined' && !restriction.timezone) {\r\n      restriction.timezone = process.env.TZ\r\n        ? process.env.TZ\r\n        : Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    }\r\n\r\n    if (!restriction || !isValidRestriction(restriction)) {\r\n      throw new Error(\r\n        !isDate(currentdate)\r\n          ? 'Не передан корректный объект даты'\r\n          : !restriction\r\n          ? 'Не передан объект restrictions'\r\n          : 'Передан невалидный обьект restrictions'\r\n      );\r\n    } else {\r\n      const companyLocalTimeZone =\r\n        TimeZoneIdentifier.getTimeZoneGMTOffsetfromNameZone(\r\n          restriction.timezone\r\n        ).split(':');\r\n      const companyLocalTimeZoneDelta =\r\n        +companyLocalTimeZone[0] * 60 + +companyLocalTimeZone[1];\r\n      const lokalTimeDelta =\r\n        companyLocalTimeZoneDelta + currentdate.getTimezoneOffset(); // смещение времени пользователя относительно времени торговой точки\r\n      const currentTimeInMinutesWithLocalDelta =\r\n        WorkTimeValidator.getTimeFromString(\r\n          <TimeString>formatDate(currentdate, 'HH:mm', 'en')\r\n        ) + lokalTimeDelta;\r\n      /**\r\n       * текущее время в минутах с начала дня (600 = 10:00. 1200 = 20:00)\r\n       * если из-за разницы поясов расчет перепрыгнул на новый день, то приводим время к правильному значению в диапазоне 24 часов\r\n       * */\r\n      const currentTime =\r\n        currentTimeInMinutesWithLocalDelta > 1440\r\n          ? currentTimeInMinutesWithLocalDelta - 1440\r\n          : currentTimeInMinutesWithLocalDelta;\r\n\r\n      const currentDayWorkTime = WorkTimeValidator.getCurrentWorkTime(\r\n        restriction,\r\n        currentTimeInMinutesWithLocalDelta > 1440\r\n          ? new Date(currentdate.getTime() + 86400000)\r\n          : currentdate\r\n      ); // текущее рабочее время\r\n      const curentDayStartTime = WorkTimeValidator.getTimeFromString(\r\n        <TimeString>currentDayWorkTime.start\r\n      ); // текущее время начала рабочего дня в минутах\r\n      const curentDayStopTime = WorkTimeValidator.getTimeFromString(\r\n        <TimeString>currentDayWorkTime.stop\r\n      ); // текущее время окончания рабочего дня в минутах\r\n      return {\r\n        workNow:\r\n          currentTime < curentDayStopTime && currentTime > curentDayStartTime,\r\n        isNewDay: currentTimeInMinutesWithLocalDelta > 1440,\r\n        currentTime,\r\n        curentDayStartTime,\r\n        curentDayStopTime,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод возвращает ближайшую возможную дату-время заказа для способа доставки \"Доставка курьером\".\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий текущие локальные дату и время пользователя\r\n   */\r\n  static getPossibleDelieveryOrderDateTime(\r\n    restriction: RestrictionsOrder,\r\n    currentdate: Date\r\n  ): string {\r\n    const checkTime = WorkTimeValidator.isWorkNow(restriction, currentdate);\r\n\r\n    if (checkTime.workNow && checkTime.currentTime) {\r\n      console.log('Сейчас рабочее время. Расчет не требуется.');\r\n      const possibleTime =\r\n        checkTime.currentTime + (+restriction.minDeliveryTimeInMinutes || 0);\r\n      const possibleTimeStr =\r\n        WorkTimeValidator.convertMinutesToTime(possibleTime);\r\n      return formatDate(currentdate, `yyyy-MM-dd ${possibleTimeStr}`, 'en');\r\n    } else {\r\n      if (checkTime.currentTime && checkTime.curentDayStopTime) {\r\n        const currentDayWorkTime = WorkTimeValidator.getCurrentWorkTime(\r\n          restriction,\r\n          checkTime.isNewDay\r\n            ? new Date(currentdate.getTime() + 86400000)\r\n            : currentdate\r\n        );\r\n        const time =\r\n          this.getTimeFromString(<TimeString>currentDayWorkTime.start) +\r\n          +restriction.minDeliveryTimeInMinutes;\r\n        const timeString = WorkTimeValidator.convertMinutesToTime(time);\r\n        return formatDate(\r\n          checkTime.isNewDay ||\r\n            checkTime.currentTime > checkTime.curentDayStopTime\r\n            ? currentdate.getTime() + 86400000\r\n            : currentdate,\r\n          `yyyy-MM-dd ${timeString}`,\r\n          'en'\r\n        );\r\n      } else {\r\n        throw 'Не удалось рассчитать currentTime и curentDayStopTime.';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод возвращает ближайшую возможную дату-время заказа для способа доставки \"Самовывоз\".\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий текущие локальные дату и время пользователя\r\n   */\r\n  static getPossibleSelfServiceOrderDateTime(\r\n    restriction: RestrictionsOrder,\r\n    currentdate: Date\r\n  ): string {\r\n    /**\r\n     * Для обеспечения иммутабельности данных создается новый обьект restrictions, идентичный полученному в параметрах, но с измененным массивом worktime.\r\n     * В массиве worktime обновляются ограничения времени работы с обычных на актуальные для самовывоза.\r\n     * */\r\n    const newRestriction = {\r\n      ...restriction,\r\n      worktime: (<WorkTime[]>restriction.worktime).map((worktime) =>\r\n        worktime.selfService\r\n          ? { ...worktime, ...worktime.selfService }\r\n          : worktime\r\n      ),\r\n    };\r\n    return WorkTimeValidator.getPossibleDelieveryOrderDateTime(\r\n      newRestriction,\r\n      currentdate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Метод возвращает актуальные данные о времени работы из массива всех вариантов обьекта restriction.\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий текущие локальные дату и время пользователя\r\n   */\r\n  static getCurrentWorkTime(\r\n    restriction: Restrictions,\r\n    currentdate: Date\r\n  ): WorkTime {\r\n    let i = 0;\r\n    let result = null;\r\n    while (i < restriction.worktime.length && !result) {\r\n      if (\r\n        restriction.worktime[i].dayOfWeek === 'all' ||\r\n        (typeof restriction.worktime[i].dayOfWeek === 'string'\r\n          ? (<string>restriction.worktime[i].dayOfWeek).toLowerCase()\r\n          : (<string[]>restriction.worktime[i].dayOfWeek).map((day) =>\r\n              day.toLowerCase()\r\n            )\r\n        ).includes(formatDate(currentdate, 'EEEE', 'en').toLowerCase())\r\n      ) {\r\n        result = restriction.worktime[i];\r\n      }\r\n      i += 1;\r\n    }\r\n    if (!result) {\r\n      throw new Error('Нет актуального расписания работы для текущего дня');\r\n    } else {\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Логика ниже предназначена для использования экземпляра класса WorkTimeValidator\r\n   */\r\n\r\n  constructor() {}\r\n\r\n  private _memory: {\r\n    getMaxOrderDate: Map<string, string>;\r\n    getTimeFromString: Map<string, number>;\r\n    isWorkNow: Map<string, ValidatorResult>;\r\n    getPossibleDelieveryOrderDateTime: Map<string, string>;\r\n    getPossibleSelfServiceOrderDateTime: Map<string, string>;\r\n    getCurrentWorkTime: Map<string, WorkTime>;\r\n    convertMinutesToTime: Map<string, TimeString>;\r\n  } = {\r\n    getMaxOrderDate: new Map<string, string>(),\r\n    getTimeFromString: new Map<string, number>(),\r\n    isWorkNow: new Map<string, ValidatorResult>(),\r\n    getPossibleDelieveryOrderDateTime: new Map<string, string>(),\r\n    getPossibleSelfServiceOrderDateTime: new Map<string, string>(),\r\n    getCurrentWorkTime: new Map<string, WorkTime>(),\r\n    convertMinutesToTime: new Map<string, TimeString>(),\r\n  };\r\n\r\n  /**\r\n   * Метод возвращает максимальную возможную дату, на которую можно заказать доставку.\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @return :string - Строка, представляющая максимальную доступную дату доставки в формате yyyy-MM-dd.\r\n   */\r\n  getMaxOrderDate(restriction: RestrictionsOrder, currentdate: Date): string {\r\n    const memoryKey = JSON.stringify({ restriction, currentdate });\r\n    const checkMemory = this._memory.getMaxOrderDate.get(memoryKey);\r\n    if (checkMemory) {\r\n      return checkMemory;\r\n    } else {\r\n      const result = WorkTimeValidator.getMaxOrderDate(\r\n        restriction,\r\n        currentdate\r\n      );\r\n      this._memory.getMaxOrderDate.set(memoryKey, result);\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод считает, сколько минут от начала дня (00:00) прошло для переданного времени.\r\n   * @param time - строка в формате HH:mm - время.\r\n   * @return :number - кол-во минут.\r\n   */\r\n  getTimeFromString(time: string): number {\r\n    const memoryKey = JSON.stringify({ time });\r\n    const checkMemory = this._memory.getTimeFromString.get(memoryKey);\r\n    if (checkMemory) {\r\n      return checkMemory;\r\n    } else {\r\n      const result = WorkTimeValidator.getTimeFromString(<TimeString>time);\r\n      this._memory.getTimeFromString.set(memoryKey, result);\r\n      return result;\r\n    }\r\n  }\r\n  /**\r\n   * Метод проверяет, доступна ли возможность доставки на ближайшее время.\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий локальные дату и время пользователя, для которых и проверяется возможность доставки\r\n   * @return Обьект, содержащий информацию:\r\n   * {\r\n        isWorkNow:boolean - Возможна ли доставка в ближайшее время\r\n        isNewDay:boolean - Служебный параметр для внутреннего использования.\r\n          Представляет признак, что из-за разницы часовых поясов расчет даты \"перепрыгнул\" на новый день.\r\n        currentTime:number - Служебный параметр для внутреннего использования.\r\n          Представляет проверяемое методом время в минутах от 00:00 в часовом поясе предприятия.\r\n        curentDayStartTime:number - Служебный параметр для внутреннего использования.\r\n          Представляет время начала рабочего дня в минутах от 00:00 в часовом поясе предприятия.\r\n        curentDayStopTime:number - Служебный параметр для внутреннего использования.\r\n          Представляет время окончания рабочего дня в минутах от 00:00 в часовом поясе предприятия.\r\n      }\r\n   */\r\n  isWorkNow(\r\n    restriction: Restrictions | RestrictionsOrder,\r\n    currentdate?: Date\r\n  ): ValidatorResult {\r\n    const memoryKey = JSON.stringify({ restriction, currentdate });\r\n    const checkMemory = this._memory.isWorkNow.get(memoryKey);\r\n    if (checkMemory) {\r\n      return checkMemory;\r\n    } else {\r\n      const result = WorkTimeValidator.isWorkNow(restriction, currentdate);\r\n      this._memory.isWorkNow.set(memoryKey, result);\r\n      return result;\r\n    }\r\n  }\r\n  /**\r\n   * Метод возвращает ближайшую возможную дату-время заказа для способа доставки \"Доставка курьером\".\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий текущие локальные дату и время пользователя\r\n   */\r\n  getPossibleDelieveryOrderDateTime(\r\n    restriction: RestrictionsOrder,\r\n    currentdate: Date\r\n  ): string {\r\n    const memoryKey = JSON.stringify({ restriction, currentdate });\r\n    const checkMemory =\r\n      this._memory.getPossibleDelieveryOrderDateTime.get(memoryKey);\r\n    if (checkMemory) {\r\n      return checkMemory;\r\n    } else {\r\n      const result = WorkTimeValidator.getPossibleDelieveryOrderDateTime(\r\n        restriction,\r\n        currentdate\r\n      );\r\n      this._memory.getPossibleDelieveryOrderDateTime.set(memoryKey, result);\r\n      return result;\r\n    }\r\n  }\r\n  /**\r\n   * Метод возвращает ближайшую возможную дату-время заказа для способа доставки \"Самовывоз\".\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий текущие локальные дату и время пользователя\r\n   */\r\n  getPossibleSelfServiceOrderDateTime(\r\n    restriction: RestrictionsOrder,\r\n    currentdate: Date\r\n  ): string {\r\n    const memoryKey = JSON.stringify({ restriction, currentdate });\r\n    const checkMemory =\r\n      this._memory.getPossibleSelfServiceOrderDateTime.get(memoryKey);\r\n    if (checkMemory) {\r\n      return checkMemory;\r\n    } else {\r\n      const result = WorkTimeValidator.getPossibleSelfServiceOrderDateTime(\r\n        restriction,\r\n        currentdate\r\n      );\r\n      this._memory.getPossibleSelfServiceOrderDateTime.set(memoryKey, result);\r\n      return result;\r\n    }\r\n  }\r\n  /**\r\n   * Метод возвращает актуальные данные о времени работы из массива всех вариантов обьекта restriction.\r\n   * @param restriction - объект, содержащий информацию о рабочем времени предприятия и ограничениях даты/времени доставки.\r\n   * @param currentdate - объект Date, представляющий текущие локальные дату и время пользователя\r\n   */\r\n  getCurrentWorkTime(restriction: Restrictions, currentdate: Date): WorkTime {\r\n    const memoryKey = JSON.stringify({ restriction, currentdate });\r\n    const checkMemory = this._memory.getCurrentWorkTime.get(memoryKey);\r\n    if (checkMemory) {\r\n      return <WorkTime>checkMemory;\r\n    } else {\r\n      const result = WorkTimeValidator.getCurrentWorkTime(\r\n        restriction,\r\n        currentdate\r\n      );\r\n      this._memory.getCurrentWorkTime.set(memoryKey, result);\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Метод конвертирует переданное кол-во минут в строкове представление времени в формате HH:mm - `(00-24 часа):(0-59 минут)`.\r\n   * Например:\r\n   *\r\n   * const a = convertMinutesToTime(50) // a = '00:50'\r\n   * const b = convertMinutesToTime(1200) // b = '20:00'\r\n   *\r\n   * @param time - Число в диапазоне от 0 до 1440 (так как максимум в 1 сутках = 1440 минут).\r\n   * При передаче в time отрицательного значения, знак будет \"отобршен\", а для метод вернет результат, рассчитанный для полученного положительного значения.\r\n   * Если в time будет передано значение больше 1440 - метод вернет результат для значения без учета \"превышающих суток\" (т.е. с кратным вычетом 1440 минут)\r\n   *\r\n   * Например:\r\n   *\r\n   * const a = convertMinutesToTime(60) // a = '01:00'\r\n   * const b = convertMinutesToTime(1500) // b = '01:00' (1440 минут \"целых\" суток были \"отброшены\")\r\n   *\r\n   * @returns\r\n   */\r\n  convertMinutesToTime(time: number): TimeString {\r\n    const memoryKey = JSON.stringify({ time });\r\n    const checkMemory = this._memory.convertMinutesToTime.get(memoryKey);\r\n    if (checkMemory) {\r\n      return checkMemory;\r\n    } else {\r\n      const result = WorkTimeValidator.convertMinutesToTime(time);\r\n      this._memory.convertMinutesToTime.set(memoryKey, result);\r\n      return result;\r\n    }\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}